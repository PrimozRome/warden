{"name":"Warden","google":"UA-29590272-1","tagline":"More than just a user database auth package for FuelPHP","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Warden is a user database auth package for the FuelPHP framework that aims to fast track development by handling the work load of authenticating and authorizing user's.\r\nBuilt for performance, it comes with ready-to-use models and database install tasks.\r\n\r\nLatest release: 1.2 ([view changelog](https://github.com/dre1080/warden/blob/master/HISTORY.md))\r\n\r\n\r\n## Features\r\n\r\n* Secure BCrypt password hashing and protection against brute force attacks.\r\n* User login/logout with \"remember-me\" functionality.\r\n* HTTP Authentication.\r\n* User ACL (roles / groups, and permissions).\r\n* User \"friendships\" and profiles.\r\n* Track information about user sign ins.\r\n* User account password resets.\r\n* User activation by email.\r\n* User account locking.\r\n* OAuth support.\r\n* And many more!\r\n\r\n\r\n## Why use BCrypt?\r\n\r\n* [How To Safely Store A Password](http://codahale.com/how-to-safely-store-a-password)\r\n* [Use BCrypt Fool!](http://yorickpeterse.com/articles/use-bcrypt-fool)\r\n* [Why You Should Use Bcrypt to Hash Stored Passwords](http://phpmaster.com/why-you-should-use-bcrypt-to-hash-stored-passwords)\r\n* [Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes](http://chargen.matasano.com/chargen/2007/9/7/enough-with-the-rainbow-tables-what-you-need-to-know-about-s.html)\r\n* [No. Use Bcrypt. Always](http://news.ycombinator.com/item?id=2004962)\r\n\r\n\r\n## Installation\r\n\r\n### Dependencies\r\n\r\nRequired Packages:\r\n\r\n* [Orm](https://github.com/fuel/orm)\r\n* [Email](https://github.com/fuel/email)\r\n\r\nOptional:\r\n\r\n* [Fuel NinjAuth](https://github.com/happyninjas/fuel-ninjauth) for oAuth feature (use the Warden adapter).\r\n\r\n\r\n### Download\r\n\r\nThis package follows standard installation rules.\r\n\r\nDownload Warden into your FuelPHP's packages directory.\r\n\r\nOr\r\n\r\n```\r\ngit clone -b master git@github.com:dre1080/warden.git warden\r\n```\r\n\r\nThen autoload the package in your app/config.php file.\r\n\r\n```php\r\n'always_load' => array(\r\n  'packages'  => array(\r\n    array('warden')\r\n  ),\r\n)\r\n```\r\n\r\n**After adding warden to your fuelphp packages stack, have a look at the warden config file to setup\r\nwarden configs before adding the required tables.**\r\n\r\n### Adding required tables to your database\r\n\r\nThere are two ways to add the Warden tables:\r\n\r\n1) SQL File in warden/config/install.sql\r\n\r\n2) Oil Task\r\n\r\n```\r\nphp oil r warden help\r\n```\r\n\r\nTo get a list of supported commands.\r\n\r\n**Once done, don't forget to create your roles and permissions in the *roles* and *permissions* tables, respectively; in order to be able to assign roles and permissions to users.**\r\n\r\n\r\n## Usage\r\n\r\nCheck for validated login:\r\n\r\n```php\r\n    if (Warden::check()) {\r\n        echo \"I'm logged in :D\";\r\n    } else {\r\n        echo \"Failed, I'm NOT logged in :(\";\r\n    }\r\n```\r\n\r\nGetting the currently logged in user:\r\n\r\n```php\r\n    if (Warden::check()) {\r\n        $current_user = Warden::current_user();\r\n        echo $current_user->username;\r\n    }\r\n```\r\n\r\nExplicitly setting the current user:\r\n\r\n```php\r\n    if (($user = Model_User::find(1))) {\r\n        Warden::set_user($user);\r\n    }\r\n```\r\n\r\nChecking for a specific role:\r\n\r\n```php\r\n    if (Warden::logged_in('admin')) {\r\n        echo \"Current user logged in as an admin\";\r\n    }\r\n\r\n    $user = Model_User::find(2);\r\n    if (Warden::has_access(array('editor', 'moderator'), $user)) {\r\n        echo \"Hey, editor - moderator\";\r\n    } else {\r\n        echo \"Fail!\";\r\n    }\r\n```\r\n\r\nChecking the current user has permission for a resource:\r\n\r\n```php\r\n    try {\r\n        // Can the user create an article?\r\n        Warden::authorize('create', 'Article');\r\n    } catch (Warden_AccessDenied $ex) {\r\n        // Nope, get out\r\n        die($ex->getMessage());\r\n    }\r\n```\r\n\r\nLog in a user by using a username or email and plain-text password:\r\n\r\n```php\r\n    if (Input::method() === 'POST') {\r\n        if (Warden::authenticate(Input::post('username_or_email'), Input::post('password'))) {\r\n            Session::set_flash('success', 'Logged in successfully');\r\n        } else {\r\n            Session::set_flash('error', 'Username or password invalid');\r\n        }\r\n        Response::redirect();\r\n    }\r\n```\r\n\r\nLog in a user using a http based authentication method:\r\n\r\n```php\r\n    if (($user_array = Warden::http_authenticate())) {\r\n        echo \"Welcome {$user_array['username']}\";\r\n    }\r\n```\r\n\r\nLog out a user by removing the related session variables:\r\n\r\n```php\r\n    if (Warden::logout()) {\r\n         echo \"I'm logged out\";\r\n    }\r\n```\r\n\r\nResetting a user's password\r\n\r\n```php\r\n    // Sending the password token\r\n    if (($user = Model_User::find('first', array('where' => array('email' => 'myemail@warden.net'))))) {\r\n        try {\r\n            $user->send_reset_password_instructions();\r\n        } catch (Exception $ex) {\r\n            echo sprintf('Oops, something went wrong: %s', $ex->getMessage());\r\n        }\r\n    }\r\n\r\n    // Resetting the password\r\n    try {\r\n        if (($user = Model_User::reset_password_by_token(\\Input::get('reset_password_token'), 'new_password'))) {\r\n            echo 'Success!';\r\n        } else {\r\n            echo 'Not a valid user';\r\n        }\r\n    } catch (Exception $ex) {\r\n        // something went wrong\r\n        echo sprintf('Oops, something went wrong: %s', $ex->getMessage());\r\n    }\r\n```\r\n\r\n*More examples are in the doc comments for each method.*\r\n\r\n## Contributors\r\n\r\nCreator and lead developer: Andrew Wayne (Ando) @dre1080.\r\n\r\nSpecial thanks to @craighooghiem, @jesseobrien, @Tenga, @rclanan, @aranw and @andreoav for contributing code, ideas and testing early versions.\r\n\r\nThanks also to the @fuel and @happyninjas dev team + many who have contributed code, ideas and issues."}